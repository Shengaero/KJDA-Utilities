/*
 * Copyright 2017 Kaidan Gustave
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.time.OffsetDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter

class Version {
    String major, minor

    String toString() {
        "${major}.${minor}"
    }
}

buildscript {
    ext.kotlin_version = '1.1.3-2'

    repositories.mavenCentral()

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:0.9.9'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
}

apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'

def versionObj = new Version(major: 0, minor: 1)
def jda_version = '3.2.0_241'
def jda_utilities_version = '1.4'
def kotlin_jda_version = '25c1fee'

group 'me.kgustave'
version = versionObj.toString()

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    examples.kotlin.srcDirs += 'src/examples/kotlin'
    test.kotlin.srcDirs += 'src/test/kotlin'
    examples {
        compileClasspath = main.output
        runtimeClasspath = main.output
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compileOnly 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.14'

    compileOnly "net.dv8tion:JDA:$jda_version"
    compileOnly "com.jagrosh:JDA-Utilities:$jda_utilities_version"
    compileOnly "com.github.JDA-Applications:Kotlin-JDA:$kotlin_jda_version"

    testCompile group: 'junit', name: 'junit', version: '4.12'

    sourceSets.examples.compileClasspath += configurations.compile + configurations.compileOnly
    sourceSets.examples.runtimeClasspath += configurations.runtime
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    logging.level = LogLevel.QUIET
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/dokkaJavadoc"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from "$buildDir/sources"
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    logging.level = LogLevel.QUIET
    classifier = 'javadoc'
    from dokkaJavadoc.outputDirectory
}

task sources(type: Copy) {
    from 'src/main/kotlin'
    into "$buildDir/sources"
}

compileJava {
    options.encoding = 'UTF-8'
    dependsOn sources
}

compileKotlin {
    kotlinOptions {
        jvmTarget = 1.8
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = 1.8
    }
}

compileExamplesKotlin {
    kotlinOptions {
        jvmTarget = 1.8
    }
}

jar {
    baseName = project.name
    def time = OffsetDateTime.now(ZoneId.of("UTC"))
    manifest {
        attributes 'Implementation-Version': version
        attributes 'Created-At': time.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)
    }
}

shadowJar {
    classifier ''
}

build {
    dependsOn clean
    dependsOn jar
    dependsOn javadocJar
    dependsOn sourcesJar
    dependsOn shadowJar

    jar.mustRunAfter clean
    javadocJar.mustRunAfter jar
    sourcesJar.mustRunAfter javadocJar
    shadowJar.mustRunAfter sourcesJar
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.github.TheMonitorLizard'
            artifactId 'KJDA-Utilities'
            version project.version

            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            artifact jar {
                classifier ''
            }
        }
    }
}

task release {
    dependsOn build
    dependsOn publishToMavenLocal

    publishToMavenLocal.mustRunAfter build
}